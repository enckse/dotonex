dotonex configuration (compose)
===

# compose

The following settings indicate how a dotonex instance should operate when
calling a composition application (default of `dotonex-compose`) to perform
actual pre-auth checks during proxy operation.

## static

In static mode the actual composition application is NOT called and instead
a payload (array) of `user/MAC` pairs is expected in the `payload` element.
This is meant for configurations that are entirely static or for debugging
dotonex itself.

## repository

dotonex is expected to utilize a git repository to manage user authentication
allowances in default operating modes. This is the path (on disk) in which a clone
of the source repository is found.

## payload

Payload can be utilized in two different formats. In static mode this should be alist
of `user/MAC` pairs within the array. In a non-static mode this should be a command.
This command should take _exactly one_ format string specifier `%s` that will be replaced
by user tokens when a user attempts to authenticate (the user attempt to authenticate
is expected to be in the format of "user:token"). This command should result in valid
JSON response containing the a user name that can be resolved to a directory within
the repository specified which contains a list of valid MAC addresses the user may authenticate
with. More information about this process is available in `dotonex-compose`.

## serverkey

dotonex utilizes a user+token combination that allows a user to use an external
tokening system to validate the user. The user will still require a password and
for dotonex this password _is shared for all users_. The "serverkey" is the shared
password. See `dotonex-compose` for more information.

## refresh

This value is used (in minutes) to determine how often to call a fetch of the external
repository when dynamically managing user configurations.

## timeout

This value (in seconds) is the amount of time the composition step may take to
perform any single unit of work (validation, fetch, build, etc.). If the
unit of work takes longer than this amount of time it is considered a timeout/failure.

## debug

Enable debugging outputs from the underlying composition calls.
    
## binary

This is the name of the composition tooling that is currently in place. Switching
out the composition binary is possible though care should be taken as any replacement
will need to, _minimally_, understand the arguments a dotonex instance passes (even
if it chooses to ignore them). More information about how the composition binary works
is found in `dotonex-compose`.

## userregex

During the "user:token" validation the "user" component must pass this regular expression
before taking the more costly step of validating the token through external tooling.

## search

The "payload", when using in dynamic mode, is expected to return JSON. This JSON
may be of many formats. When a dotonex instance receives the payload it must understand
how to look into the JSON response and find the user name (matching the user from "user:token").
This search protocol takes two different objects: a "key" to look into (if a key is the last
element that it must be a string representing the user name) or "inarray[]" (with an optional
index value within the array) in which elements in an array will be search for "key" fields that
_must_ follow it. This is discussed more in `dotonex-compose`.

## polling

When polling is enable than operations to fetch and update from the remote repository
will be performed throughout the lifetime of the dotonex instance.

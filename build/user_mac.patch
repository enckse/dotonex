diff --git a/src/radius/radius_server.c b/src/radius/radius_server.c
index 0a8f448e7..ef5cada45 100644
--- a/src/radius/radius_server.c
+++ b/src/radius/radius_server.c
@@ -622,6 +622,64 @@ static void radius_server_testing_options(struct radius_session *sess,
 #endif /* CONFIG_TESTING_OPTIONS */
 }
 
+int check_user_mac(struct radius_msg *msg) {
+	u8 *mac;
+	size_t mac_len;
+	u8 *user;
+	size_t user_len;
+    int ret;
+    ret = 0;
+	if (radius_msg_get_attr_ptr(msg, RADIUS_ATTR_USER_NAME, &user,
+				    &user_len, NULL) < 0) {
+		RADIUS_DEBUG("Could not get User-Name");
+		ret = 1;
+	}
+    if (ret == 0) {
+		if (radius_msg_get_attr_ptr(msg, RADIUS_ATTR_CALLING_STATION_ID, &mac,
+					    &mac_len, NULL) < 0) {
+			RADIUS_DEBUG("Could not get Calling-Station-Id");
+			ret = 1;
+		}
+    }
+    if (ret == 0) {
+        int clear_username;
+        char* username;
+        clear_username = 0;
+        username = os_malloc(user_len * 4 + 1);
+		if (username == NULL) {
+			ret = 1;
+		}
+        if (ret == 0) {
+            clear_username = 1;
+            int clear_calling;
+            char cmd[100] = "";
+            char* calling_id;
+            clear_calling = 0;
+			printf_encode(username, user_len * 4 + 1, user, user_len);
+            calling_id = os_malloc(mac_len * 4 + 1);
+			if (calling_id == NULL) {
+				ret = 1;
+			}
+            if (ret == 0) {
+                clear_calling = 1;
+				printf_encode(calling_id, mac_len * 4 + 1, mac, mac_len);
+                strcat(cmd, "radusermac");
+                strcat(cmd, " ");
+                strcat(cmd, username);
+                strcat(cmd, " ");
+                strcat(cmd, calling_id);
+                ret = system(cmd);
+            }
+            if (clear_calling > 0) {
+				os_free(calling_id);
+            }
+        }
+        if (clear_username > 0) {
+			os_free(username);
+        }
+    }
+    return ret;
+}
 
 static struct radius_session *
 radius_server_get_new_session(struct radius_server_data *data,
@@ -635,6 +693,12 @@ radius_server_get_new_session(struct radius_server_data *data,
 	struct eap_config eap_conf;
 	struct eap_user tmp;
 
+    res = check_user_mac(msg);
+    if (res != 0) {
+        RADIUS_DEBUG("Failed user+mac check");
+        return NULL;
+    }
+
 	RADIUS_DEBUG("Creating a new session");
 
 	if (radius_msg_get_attr_ptr(msg, RADIUS_ATTR_USER_NAME, &user,
